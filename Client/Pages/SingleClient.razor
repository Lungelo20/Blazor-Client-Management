@page "/client"
@page "/client/{id:int}"
@inject IClientDetailService ClientDetailService

@if(Id == null)
{
    <PageTitle>Create new client</PageTitle>
    <h3>Create new client.</h3>
}
else
{
    <PageTitle>@client.Name</PageTitle>
    <h3>Client @client.Name</h3>
}
    <EditForm Model="client" OnSubmit="HandleSubmit">
        <div>
            <label>Name:</label>
            <InputText id="name" @bind-Value="client.Name" class="form-control"></InputText>
        </div>

        <div>
            <label>Gender:</label>
            <InputText id="gender" @bind-Value="client.Gender" class="form-control"></InputText>
        </div>

        <br/>
    <div class="form-group">
        <div class="form-group">
            <button type="button" class="btn btn-secondary"
                    @onclick="@(() => client.Addresses.Add(new ClientAddress()))">
                Add Address
            </button>
        </div>

        @for (var i = 0; i < client.Addresses.Count; i++)
        {
            var index = i;
            var address = client.Addresses[i];

            <h5>Address @(i + 1)</h5>

            <div class="form-group">
                <label>Address Type:</label>
                <InputText class="form-control" @bind-Value="address.AddressType" />
            </div>
            <div class="form-group">
                <label>Address line 1:</label>
                <InputText class="form-control" @bind-Value="address.LineOne" />
            </div>
            <div class="form-group">
                <label>Address line 2:</label>
                <InputText class="form-control" @bind-Value="address.LineTwo" />
            </div>
            <div class="form-group">
                <label>City:</label>
                <InputText class="form-control" @bind-Value="address.City" />
            </div>

            <div class="form-group">
                <label>Code:</label>
                <InputText class="form-control" @bind-Value="address.Code" />
            </div>
            <div class="form-group">
                <label>Province:</label>
                <InputText class="form-control" @bind-Value="address.Province" />
            </div>

            <div class="form-group">
                <label>Country:</label>
                <InputText class="form-control" @bind-Value="address.Country" />
            </div>
            
            <div class="form-group">
                <label>Status:</label>
                <InputNumber class="form-control" @bind-Value="address.Status" />
            </div>
            <br/>
            <button type="button" class="btn btn-danger"
                @onclick="@(() => client.Addresses.RemoveAt(index))">
                Remove
            </button>
        }
    </div>

    <br />
    <div class="form-group">
        <div class="form-group">
            <button type="button" class="btn btn-secondary"
                    @onclick="@(() => client.Contacts.Add(new ClientContact()))">
                Add Contact
            </button>
        </div>

        @for (var i = 0; i < client.Contacts.Count; i++)
        {
            var index = i;
            var contacts = client.Contacts[i];

            <h5>Contacts @(i + 1)</h5>
            <div class="form-group">
                <label>Contact Type:</label>
                <InputText class="form-control" @bind-Value="contacts.ContactType" />
            </div>

            <div class="form-group">
                <label>Contact Info:</label>
                <InputText class="form-control" @bind-Value="contacts.Contact" />
            </div>

            <div class="form-group">
                <label>Status:</label>
                <InputNumber class="form-control" @bind-Value="contacts.Status" />
            </div>
            <br/>
            <button type="button" class="btn btn-danger"
                @onclick="@(() => client.Contacts.RemoveAt(index))">
                Remove
            </button>
        }
    </div>
        <br>
        <div>
            <button class="btn btn-primary" type="submit">@btnText</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteClient">Delete Client</button>
        </div>

    </EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText { get; set; } = string.Empty;
    ClientDetails client = new ClientDetails();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save" : "Update";
        await ClientDetailService.GetAddresses();
        await ClientDetailService.GetContacts();
    }
    protected override async Task OnParametersSetAsync()
    {
        if(Id == null)
        {

        }
        else
        {
            client = await ClientDetailService.GetAClient((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await ClientDetailService.AddClient(client);
        }
        else
        {
            await ClientDetailService.UpdateClient(client);
        }
    }
    async Task DeleteClient()
    {
        await ClientDetailService.DeleteClient(client.Id);
    }
  
}
